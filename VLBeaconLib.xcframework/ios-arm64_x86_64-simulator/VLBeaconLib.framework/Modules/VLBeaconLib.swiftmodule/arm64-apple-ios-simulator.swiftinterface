// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VLBeaconLib
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport
import Foundation
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum PlayerBeaconEventEnum : VLBeaconLib.BeaconEventNameProtocol, Swift.Equatable {
  case play
  case firstFrame
  case ping
  case adRequest
  case adImpression
  case failedToStart
  case buffering
  case droppedStream
  case resume
  case pause
  case custom(eventName: Swift.String)
  public func getBeaconEventNameString() -> Swift.String
  public static func == (a: VLBeaconLib.PlayerBeaconEventEnum, b: VLBeaconLib.PlayerBeaconEventEnum) -> Swift.Bool
}
public enum SocialEnum {
  case facebook
  case instagram
  case twitter
  case whatsApp
  case email
  case custom(eventName: Swift.String)
}
public enum UpdateType : Swift.String {
  case upgrade
  case downgrade
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct WatchlistPayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(vid: Swift.String? = nil, items: [Swift.String]? = nil, additionalData: [Swift.String : Swift.String]? = nil)
}
public struct LanguageSelectionPayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(languageCode: Swift.String? = nil, additionalData: [Swift.String : Swift.String]? = nil)
}
public struct SearchPayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(searchText: Swift.String? = nil, items: [Swift.String]? = nil, additionalData: [Swift.String : Swift.String]? = nil)
}
public enum NetworkConnectionStatus : Swift.String {
  case poor
  case good
  case disConnected
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NetworkBandwidthUnit : Swift.String {
  case mbps
  case kbps
  case bps
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CustomPayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(additionalData: [Swift.String : Swift.String]? = nil)
}
public enum UserBeaconEventEnum : VLBeaconLib.BeaconEventNameProtocol, Swift.Equatable {
  case loginInit
  case loginSuccess
  case loginFailure
  case logout
  case signupInit
  case signupSuccess
  case signupFailure
  case resendVerificationCode
  case getVerificationCode
  case submitVerificationCode
  case search
  case addToWatchlist
  case removeFromWatchlist
  case removeAllFromWatchlist
  case removeAllFromWatchHistory
  case pageView
  case like
  case dislike
  case clickOnItem
  case share
  case languageSelection
  case subscribeNow
  case planSelection
  case applyCodeStatus
  case cardAdded
  case paymentInitiate
  case paymentPending
  case paymentSuccess
  case paymentFailed
  case cancelSubscription
  case updateSubscription
  case updateName
  case updateMobileNumber
  case updateEmail
  case verifyMobileNumber
  case verifyEmail
  case setGameAlerts
  case customerFeedback
  case deleteAccount
  case setAutoPlay
  case removeAllDevices
  case removeDevice
  case custom(eventName: Swift.String)
  public func getBeaconEventNameString() -> Swift.String
  public static func == (a: VLBeaconLib.UserBeaconEventEnum, b: VLBeaconLib.UserBeaconEventEnum) -> Swift.Bool
}
public struct StoreKitPayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(planId: Swift.String? = nil, planName: Swift.String? = nil, planDesc: Swift.String? = nil, planType: Swift.String? = nil, paymentMethod: Swift.String? = nil, promotionCode: Swift.String? = nil, discountAmount: Swift.Int? = nil, purchaseType: Swift.String? = nil, orderSubTotalAmount: Swift.Int? = nil, orderTaxAmount: Swift.Int? = nil, orderTotalAmount: Swift.Int? = nil, currencyCode: Swift.String? = nil, transactionId: Swift.String? = nil, additionalData: [Swift.String : Swift.String]? = nil)
}
public struct RemoveAllDevicePayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(deviceList: [VLBeaconLib.RemoveDevicePayload]? = nil, additionalData: [Swift.String : Swift.String]? = nil)
}
public struct AnyDecodable : Swift.Decodable {
  public var value: Any
  public init(from decoder: any Swift.Decoder) throws
}
public struct ApplyCodePayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(status: Swift.String? = nil, promotionCode: Swift.String? = nil, discountAmount: Swift.Int? = nil, additionalData: [Swift.String : Swift.String]? = nil)
}
public struct UpdatePlanStoreKitPayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(updateName: VLBeaconLib.UpdateType? = nil, previousPlanId: Swift.String? = nil, previousPlanName: Swift.String? = nil, previousPlanDesc: Swift.String? = nil, previousPlanType: Swift.String? = nil, newPlanId: Swift.String? = nil, newPlanName: Swift.String? = nil, newPlanDesc: Swift.String? = nil, newPlanType: Swift.String? = nil, additionalData: [Swift.String : Swift.String]? = nil)
}
@_hasMissingDesignatedInitializers final public class VLBeacon {
  final public class func getInstance() -> VLBeaconLib.VLBeacon
  final public var tveProvider: Swift.String?
  final public var authorizationToken: Swift.String? {
    get
    set
  }
  final public var debugLogs: Swift.Bool? {
    get
    set
  }
  final public var disabledTracking: Swift.Bool
  final public func startSyncBeaconEvents()
  final public func triggerBeaconEvent(_ eventStructBody: any VLBeaconLib.BeaconEventBodyProtocol)
  @objc deinit
}
public struct SharePayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(contentUrl: Swift.String? = nil, shareOption: VLBeaconLib.SocialEnum? = nil, additionalData: [Swift.String : Swift.String]? = nil)
}
public struct PlanPayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(planId: Swift.String? = nil, planName: Swift.String? = nil, planDesc: Swift.String? = nil, planType: Swift.String? = nil, additionalData: [Swift.String : Swift.String]? = nil)
}
public struct AuthenticationPayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(type: VLBeaconLib.AuthType? = nil, subType: VLBeaconLib.AuthSubType? = nil, email: Swift.String? = nil, phoneNumber: Swift.String? = nil, mvpd: Swift.String? = nil, existingUser: Swift.Bool? = nil, additionalData: [Swift.String : Swift.String]? = nil)
}
public protocol BeaconEventNameProtocol {
  func getBeaconEventNameString() -> Swift.String
}
public protocol StructToDictionaryProtocol {
  func toDictionary() -> Swift.Dictionary<Swift.String, Any>
}
extension VLBeaconLib.StructToDictionaryProtocol {
  public func toDictionary() -> Swift.Dictionary<Swift.String, Any>
}
public protocol BeaconDBQueryProtocol {
  func addBeaconInDBQuery() -> Swift.String?
}
public protocol BeaconEventPayloadProtocol : VLBeaconLib.StructToDictionaryProtocol {
}
public protocol BeaconEventBodyProtocol : VLBeaconLib.BeaconDBQueryProtocol, VLBeaconLib.StructToDictionaryProtocol {
  func triggerEvents(authToken: Swift.String)
}
public struct AutoPlayPayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(isAutoPlayOn: Swift.Bool? = false, additionalData: [Swift.String : Swift.String]? = nil)
}
public enum AuthType {
  case social
  case viewlift
  case tve
  case custom(eventName: Swift.String)
}
public enum AuthSubType {
  case google
  case apple
  case facebook
  case loginWithMobile
  case activateDevice
  case email
  case phoneNo
  case adobe
  case verimatrix
  case custom(eventName: Swift.String)
}
public struct RemoveDevicePayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(deviceName: Swift.String? = nil, dateAdded: Swift.String? = nil, lastWatched: Swift.String? = nil, additionalData: [Swift.String : Swift.String]? = nil)
}
public struct CustomerFeedbackPayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(customerComment: Swift.String? = nil, additionalData: [Swift.String : Swift.String]? = nil)
}
public enum BeaconType : Swift.String, Swift.CaseIterable {
  case user
  case player
  public init?(rawValue: Swift.String)
  public typealias AllCases = [VLBeaconLib.BeaconType]
  public typealias RawValue = Swift.String
  public static var allCases: [VLBeaconLib.BeaconType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct SentimentPayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(vid: Swift.String, comment: Swift.String? = nil, additionalData: [Swift.String : Swift.String]? = nil)
}
@_hasMissingDesignatedInitializers open class NetworkReachabilityManager {
  public enum NetworkReachabilityStatus {
    case unknown
    case notReachable
    case reachable(VLBeaconLib.NetworkReachabilityManager.ConnectionType)
  }
  public enum ConnectionType {
    case ethernetOrWiFi
    case wwan
    public static func == (a: VLBeaconLib.NetworkReachabilityManager.ConnectionType, b: VLBeaconLib.NetworkReachabilityManager.ConnectionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias Listener = (VLBeaconLib.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Void
  open var isReachable: Swift.Bool {
    get
  }
  open var isReachableOnWWAN: Swift.Bool {
    get
  }
  open var isReachableOnEthernetOrWiFi: Swift.Bool {
    get
  }
  open var networkReachabilityStatus: VLBeaconLib.NetworkReachabilityManager.NetworkReachabilityStatus {
    get
  }
  open var listenerQueue: Dispatch.DispatchQueue
  open var listener: VLBeaconLib.NetworkReachabilityManager.Listener?
  open var flags: SystemConfiguration.SCNetworkReachabilityFlags? {
    get
  }
  open var previousFlags: SystemConfiguration.SCNetworkReachabilityFlags
  convenience public init?(host: Swift.String)
  convenience public init?()
  @objc deinit
  @discardableResult
  open func startListening() -> Swift.Bool
  open func stopListening()
}
extension VLBeaconLib.NetworkReachabilityManager.NetworkReachabilityStatus : Swift.Equatable {
}
public func == (lhs: VLBeaconLib.NetworkReachabilityManager.NetworkReachabilityStatus, rhs: VLBeaconLib.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Bool
public struct TrayPayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(vid: Swift.String? = nil, trayId: Swift.String? = nil, trayNumber: Swift.Int? = nil, itemNo: Swift.Int? = nil, additionalData: [Swift.String : Swift.String]? = nil)
}
public struct DeleteAccountPayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(customerName: Swift.String? = nil, mobileNumber: Swift.String? = nil, email: Swift.String? = nil, additionalData: [Swift.String : Swift.String]? = nil)
}
public struct VerifiedProfilePayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(mobileNumber: Swift.String? = nil, email: Swift.String? = nil, additionalData: [Swift.String : Swift.String]? = nil)
}
public struct PlayerBeaconEventStruct {
  public init(eventName: VLBeaconLib.PlayerBeaconEventEnum, vid: Swift.String? = nil, profid: Swift.String? = nil, userId: Swift.String? = nil, player: Swift.String? = nil, media_type: Swift.String? = nil, tstampoverride: Swift.String? = nil, stream_id: Swift.String? = nil, dp1: Swift.String? = nil, dp2: Swift.String? = nil, dp3: Swift.String? = nil, dp4: Swift.String? = nil, dp5: Swift.String? = nil, ref: Swift.String? = nil, apos: Swift.Int? = nil, apod: Swift.Int? = nil, vpos: Swift.Int? = nil, url: Swift.String? = nil, embedUrl: Swift.String? = nil, ttFirstFrame: Swift.Int? = nil, bitrate: Swift.Int? = nil, connectionSpeed: Swift.Int? = nil, resolutionHeight: Swift.Int? = nil, resolutionWidth: Swift.Int? = nil, bufferHealth: Swift.Int? = nil, plid: Swift.String? = nil, fcid: Swift.String? = nil, seriesid: Swift.String? = nil, seasonid: Swift.String? = nil, seasonnumber: Swift.String? = nil, subscription_type: Swift.String? = nil, mvpdprovider: Swift.String? = nil, guid: Swift.String? = nil, appversion: Swift.String? = nil, duration: Swift.String? = nil, siteId: Swift.String? = nil, environment: Swift.String? = nil, source: Swift.String?, tveProvider: Swift.String? = nil, additionalData: [Swift.String : Any]? = nil)
}
extension VLBeaconLib.PlayerBeaconEventStruct : VLBeaconLib.BeaconEventBodyProtocol {
  public func triggerEvents(authToken: Swift.String)
  public func addBeaconInDBQuery() -> Swift.String?
}
public struct UpdateProfilePayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(previousName: Swift.String? = nil, newName: Swift.String? = nil, previousNumber: Swift.String? = nil, newNumber: Swift.String? = nil, previousEmail: Swift.String? = nil, newEmail: Swift.String? = nil, verified: Swift.Bool? = false, additionalData: [Swift.String : Swift.String]? = nil)
}
public struct GameAlertPayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(isAlertOn: Swift.Bool? = false, additionalData: [Swift.String : Swift.String]? = nil)
}
public struct PageViewPayload : VLBeaconLib.BeaconEventPayloadProtocol {
  public init(pgId: Swift.String? = nil, pgName: Swift.String? = nil, pgUrl: Swift.String? = nil, sourceUrl: Swift.String? = nil, additionalData: [Swift.String : Swift.String]? = nil)
}
public struct UserBeaconEventStruct {
  public init(eventName: VLBeaconLib.UserBeaconEventEnum, userId: Swift.String? = nil, profileId: Swift.String? = nil, siteId: Swift.String? = nil, pfm: Swift.String? = nil, etstamp: Swift.String? = nil, environment: Swift.String? = nil, appversion: Swift.String? = nil, source: Swift.String?, eventData: (any VLBeaconLib.BeaconEventPayloadProtocol)? = nil, additionalData: [Swift.String : Any]? = nil)
}
extension VLBeaconLib.UserBeaconEventStruct : VLBeaconLib.BeaconEventBodyProtocol {
  public func triggerEvents(authToken: Swift.String)
  public func addBeaconInDBQuery() -> Swift.String?
}
extension VLBeaconLib.UpdateType : Swift.Equatable {}
extension VLBeaconLib.UpdateType : Swift.Hashable {}
extension VLBeaconLib.UpdateType : Swift.RawRepresentable {}
extension VLBeaconLib.NetworkConnectionStatus : Swift.Equatable {}
extension VLBeaconLib.NetworkConnectionStatus : Swift.Hashable {}
extension VLBeaconLib.NetworkConnectionStatus : Swift.RawRepresentable {}
extension VLBeaconLib.NetworkBandwidthUnit : Swift.Equatable {}
extension VLBeaconLib.NetworkBandwidthUnit : Swift.Hashable {}
extension VLBeaconLib.NetworkBandwidthUnit : Swift.RawRepresentable {}
extension VLBeaconLib.BeaconType : Swift.Equatable {}
extension VLBeaconLib.BeaconType : Swift.Hashable {}
extension VLBeaconLib.BeaconType : Swift.RawRepresentable {}
extension VLBeaconLib.NetworkReachabilityManager.ConnectionType : Swift.Equatable {}
extension VLBeaconLib.NetworkReachabilityManager.ConnectionType : Swift.Hashable {}
